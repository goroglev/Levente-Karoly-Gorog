1. daysOfWeek = ['Monday',
              'Tuesday',
              'Wednesday',
              'Thursday',
              'Friday',
              'Saturday',
              'Sunday']

months =             ['Jan', \
                      'Feb', \
                      'Mar', \
                      'Apr', \
                      'May', \
                      'Jun', \
                      'Jul', \
                      'Aug', \
                      'Sep', \
                      'Oct', \
                      'Nov', \
                      'Dec']

print "DAYS: %s, MONTHS %s" % 
    (daysOfWeek, months)

2. In python 2.6 or earlier, the code will print error type 1 if accessSecureSystem raises an exception of either AccessError type or SecurityError type
try:
  accessSecureSystem()
except AccessError, SecurityError:
  print "error type 1"

continueWork()

3. 
def f(): pass
print type(f())

4. what is the output of the following code?
print type(lambda:None)

5. what is the output of the below program?
a = [1,2,3,None,(),[],]
print len(a)

6.  Assuming python version 3.x
print (type(1/2))

7. 
x = 4.5
y = 2
print x//y

8. Assuming python 2.6 
f = None

for i in range (5):
    with open("data.txt", "w") as f:
        if i > 2:
            break

print f.closed

9. 
print r"\nwoow"
	new line then the string: woow
	the text exactly like this: r"\nwoow"
	the text like exactly like this: \nwoow - correct
	the letter r and then newline then the text: woow
	the letter r then the text like this: nwoow

10.  
print "\x48\x49!"
\x is an escape sequence that means the following 2 digits are a hexadicmal number encoding a character.

11. 
class parent:
    def __init__(self, param):
        self.v1 = param

class child(parent):
    def __init__(self, param):
        self.v2 = param

obj = child(11)
print "%d %d" % (obj.v1, obj.v2)
	None None
	None 11 - incorrect
	11 None
	11 11
	Error is generated by program

12. What sequence of numbers is printed?
values = [1, 2, 1, 3]
nums = set(values)

def checkit(num):
    if num in nums:
        return True
    else:
        return False

for i in  filter(checkit, values):
    print i

13. 
confusion = {}
confusion[1] = 1
confusion['1'] = 2
confusion[1.0] = 4

sum = 0
for k in confusion:
    sum += confusion[k]

print sum

14. 
names1 = ['Amir', 'Barry', 'Chales', 'Dao']

loc = names1.index("Edward")

print loc
	-1
	0
	4
	Edward
	An exception is thrown

15. 
numbers = [1, 2, 3, 4]

numbers.append([5,6,7,8])

print len(numbers)
	4
	5
	8
	12
	An exception is thrown

16. 
def addItem(listParam):
    listParam += [1]

mylist = [1, 2, 3, 4]
addItem(mylist)
print len(mylist)
	1
	4
	5
	8
	An exception is thrown

17. 
my_tuple = (1, 2, 3, 4)
my_tuple.append( (5, 6, 7) )
print len(my_tuple)
	1
	2
	5
	7
	An exception is thrown

18. 
def print_header(str):
    print "+++%s+++" % str


print_header.category = 1
print_header.text = "some info"

print_header("%d %s" %  \
(print_header.category, print_header.text))

	+++1 some info+++
	+++%s+++
	1
	1
	some info
description:
As of python 2.1 you could assign arbitrary typed information to functions.

19. 
def myfunc(x, y, z, a):
    print x + y

nums = [1, 2, 3, 4]

myfunc(*nums)
	1
	3 - correct
	6
	10
	An exception is thrown

20. class NumFactory:
    def __init__(self, n):
        self.val = n
    def timesTwo(self):
        self.val *= 2
    def plusTwo(self):
        self.val += 2

f = NumFactory(2)
for m in dir(f):
    mthd = getattr(f,m)
    if callable(mthd):
        mthd()

print f.val
	2
	4
	6
	8
	An exception is thrown

21. What gets printed (with python version 2.X) assuming the user enters the following at the prompt?
In python 3.x is different.

#: foo
a = input("#: ")

print a
	f
	foo
	#: foo
	An exception is thrown

22.
kvps = { '1' : 1, '2' : 2 }
theCopy = dict(kvps)

kvps['1'] = 5

sum = kvps['1'] + theCopy['1']
print sum
	1
	2
	6 - correct
	10
	An exception is thrown
description:
Creating a new dictionary object initialized from the first does a 'shallow copy' 
